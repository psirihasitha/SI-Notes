class Node:
    def __init__ (self,data = None,next = None,prev=None):
        self.data = data
        self.next = next
        self.prev = prev

class LinkedList:
    def __init__ (self):
        self.head = None

    def insert_at_beginning(self,data):
        if self.head == None:
            node = Node(data, self.head, None)
            self.head = node
        else:
            node = Node(data, self.head, None)
            self.head.prev = node
            self.head = node
        
    
        
    def insert_at_end(self,data):
        if self.head is None:
            self.head = Node(data,None,None)
            return
        
        itr = self.head
        while itr.next:
            itr = itr.next
        
        n = Node(data,None,itr)
        itr.next = n
        n.prev = itr
        
    def insert_values(self,data_list):
        self.head = None
        for data in data_list:
            self.insert_at_end(data)
    
    def insert_at_index(self,data,index):
        if index == 0:
            self.insert_at_beginning(data)
            return
            
        itr = self.head
        while index>1:
            itr = itr.next
            index-=1
       
        n = Node(data,None,None)
        n.next=itr.next
        itr.next.prev = n
        itr.next = n  
        n.prev = itr
        
    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            itr = itr.next
            count+=1
        return count
        
    def remove_at(self,index):
        if index<0 or index > self.get_length():
            raise Exception("Invalid Index")
        if index == 0:
            self.head = self.head.next
            return 
            #garbage collection is taken automatically
            
        count = 0
        itr = self.head
        while itr:
            if count == index-1:
                n = itr.next.next
                itr.next = itr.next.next
                
                break
            itr = itr.next
            count+=1

            

    def strt_print(self):
        if self.head is None:
            print("Linked list empty")

            return
        
        itr = self.head
        lststr= ""
        while itr:
            lststr += str(itr.data) + "-->"
            itr = itr.next

        print(lststr)
     
       
    def rev_print(self):
        if self.head is None:
            print("Linked list empty")

            return
        
        itr = self.head
        x = 0
        while itr.next:
            itr = itr.next
            x+=1
        x+=1

        lststr= ""
        while itr:
            lststr += str(itr.data) + "-->"
            itr = itr.prev
        print(lststr)




if __name__ == "__main__":
    l1 = LinkedList()
    l1.insert_values(["banana","mango","grapes","orange"])
    l1.insert_at_index("jack fruit",0)

    l1.strt_print()
    l1.rev_print()
  
